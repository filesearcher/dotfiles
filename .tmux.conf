# cat << ►_◄ > /dev/null

source-file "${HOME}/.tmux-themepack/powerline/default/blue.tmuxtheme"

# -- general -------------------------------------------------------------------

setw -g mode-keys vi

set -g default-terminal "screen-256color" # colors!
setw -g xterm-keys on
set -s escape-time 0                      # fastest command sequences
set -sg repeat-time 600                   # increase repeat timeout
set -s quiet on                           # disable various messages
set -s focus-events on
set-option -g display-time 4000
set-environment -g CHERE_INVOKING 1
# Sane scrolling
set -g terminal-overrides 'screen*:smcup@:rmcup@'
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

set -g prefix2 C-a                        # GNU-Screen compatible prefix
bind C-a send-prefix -2
bind-key a send-prefix -2

set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on

set -g history-limit 5000                 # boost history

# edit configuration
bind e new-window -n '~/.tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\"'"

# reload configuration
bind r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'


# -- display -------------------------------------------------------------------

set -g base-index 1         # start windows numbering at 1
setw -g pane-base-index 1   # make pane numbering consistent with windows

setw -g automatic-rename on # rename window to reflect current program
set -g renumber-windows on  # renumber windows when a window is closed

set -g set-titles on                        # set terminal title

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

set -g status-interval 10     # redraw status line every 10 seconds

# clear both screen and history
bind -n C-l send-keys C-l \; run 'sleep 0.05 && tmux clear-history'

# activity
set -g monitor-activity on
set -g visual-activity off
set -g window-status-activity-style 'fg=default,bg=default,blink'

# -- navigation ----------------------------------------------------------------

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# pane navigation
bind -r h select-pane -L  # move left
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up
bind -r l select-pane -R  # move right
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2
bind -n M-y resize-pane -Z

# window navigation
unbind n
unbind p
bind -r C-h previous-window # select previous window
bind -r C-l next-window     # select next window
bind Tab last-window        # move to last active window
# Shift arrow to switch windows
bind -n S-Left  previous-window
bind -n S-Right next-window

# pane Switch 
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# split panes using | and -
bind < split-window -h -c '#{pane_current_path}'
bind > split-window -v -c '#{pane_current_path}'
bind C new-window -c $PWD

# scrolling
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-selection
unbind-key -t vi-copy Home  ; bind-key -t vi-copy Home  start-of-line
unbind-key -t vi-copy End   ; bind-key -t vi-copy End   end-of-line
bind-key -t vi-copy V rectangle-toggle
bind-key -t vi-copy Y copy-end-of-line
bind p paste-buffer
bind -n C-y copy-mode
bind Escape copy-mode


# toggle mouse
bind m \
    setw -g mouse \;\
    run "cut -c3- ~/.tmux.conf | sh -s _display_mouse"

bind -n M-q \
    setw -g mouse \;\
    run "cut -c3- ~/.tmux.conf | sh -s _display_mouse"

# syncronize panes 
bind -n M-s set-window-option synchronize-panes

#-- 8< ------------------------------------------------------------------------

run 'cut -c3- ~/.tmux.conf | sh -s _apply_configuration'


# ►_◄
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# __newline='
# '
#
# _is_enabled() {
#   ( ([ x"$1" = x"enabled" ] || [ x"$1" = x"true" ] || [ x"$1" = x"yes" ] || [ x"$1" = x"1" ]) && return 0 ) || return 1
# }
#
# _display_mouse() {
#     mstate=$(tmux show -g mouse)
#     tmux display "$mstate"
# }
#
# _split_window() {
#   tty=${1:-$(tmux display -p '#{pane_tty}')}
#   shift
#   # shellcheck disable=SC2039
#   if [ x"$OSTYPE" = x"cygwin" ]; then
#     pid=$(ps -a | sort -d | awk -v tty="${tty##/dev/}" '$5 == tty && /ssh/ && !/-W/ { print $1; exit 0 }')
#     [ -n "$pid" ] && ssh=$(tr '\0' ' ' < "/proc/$pid/cmdline")
#   else
#     ssh=$(ps -t "$tty" -o command= | sort -d | awk '/ssh/ && !/-W/ { print $0; exit 0 }')
#   fi
#   if [ -n "$ssh" ]; then
#     # shellcheck disable=SC2046
#     tmux split-window "$@" $(echo "$ssh" | sed -e "s/;/\\\\;/g")
#   else
#     tmux split-window "$@"
#   fi
# }
#
# _apply_bindings() {
#   tmux_conf_new_window_retain_current_path=true
#   if _is_enabled "$tmux_conf_new_window_retain_current_path"; then
#     tmux bind c new-window -c '#{pane_current_path}'
#   else
#     tmux bind c new-window
#   fi
#
#   tmux_conf_new_pane_retain_current_path=true
#   tmux_conf_new_pane_reconnect_ssh=true
#   if _is_enabled "$tmux_conf_new_pane_reconnect_ssh"; then
#     if _is_enabled "$tmux_conf_new_pane_retain_current_path"; then
#       tmux  bind '"'  run "cut -c3- ~/.tmux.conf | sh -s _split_window #{pane_tty} -v -c '#{pane_current_path}'" \;\
#             bind %    run "cut -c3- ~/.tmux.conf | sh -s _split_window #{pane_tty} -h -c '#{pane_current_path}'" \;\
#             bind -    run "cut -c3- ~/.tmux.conf | sh -s _split_window #{pane_tty} -v -c '#{pane_current_path}'" \;\
#             bind _    run "cut -c3- ~/.tmux.conf | sh -s _split_window #{pane_tty} -h -c '#{pane_current_path}'"
#     else
#       tmux  bind '"'  run "cut -c3- ~/.tmux.conf | sh -s _split_window #{pane_tty} -v" \;\
#             bind %    run "cut -c3- ~/.tmux.conf | sh -s _split_window #{pane_tty} -h" \;\
#             bind -    run "cut -c3- ~/.tmux.conf | sh -s _split_window #{pane_tty} -v" \;\
#             bind _    run "cut -c3- ~/.tmux.conf | sh -s _split_window #{pane_tty} -h"
#     fi
#   else
#     if _is_enabled "$tmux_conf_new_pane_retain_current_path"; then
#       tmux  bind '"'  split-window -v -c '#{pane_current_path}' \;\
#             bind %    split-window -h -c '#{pane_current_path}' \;\
#             bind -    split-window -v -c '#{pane_current_path}' \;\
#             bind _    split-window -h -c '#{pane_current_path}'
#     else
#       tmux  bind '"'  split-window -v \;\
#             bind %    split-window -h \;\
#             bind -    split-window -v \;\
#             bind _    split-window -h
#     fi
#   fi
#
#   tmux_conf_new_session_prompt=false
#   if _is_enabled "$tmux_conf_new_session_prompt"; then
#     tmux bind C-c command-prompt -p new-session 'new-session -s "%%"'
#   else
#     tmux bind C-c new-session
#   fi
# }
#
# _apply_configuration() {
#   _apply_bindings
#   for name in $(printenv | grep -Eo '^tmux_conf_[^=]+'); do tmux setenv -gu "$name"; done;
# }
#
# "$@"
